./templates/index.html
<!DOCTYPE html>
<html>
<head>
    <title>Phishing Detection UI</title>
    <meta charset="utf-8"/>
    <!-- Ensures better responsiveness on mobile devices -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/static/style.css" />
</head>
<body>
    <div class="wrapper">
        <h1>Phishing Detection UI</h1>
        <p class="api-info"><strong>API Base URL:</strong> {{ api_base_url }}</p>

        <section>
            <h2>Insert Email</h2>
            <label>Subject:</label>
            <input type="text" id="insert-subject" placeholder="Subject" />
            
            <label>Body (Base64):</label>
            <textarea id="insert-body" rows="3"></textarea>
            
            <label>Sender:</label>
            <input type="text" id="insert-sender" placeholder="sender@example.com"/>
            
            <label>Reply To:</label>
            <input type="text" id="insert-reply_to" placeholder="replyto@example.com"/>
            
            <label>Type (phishing or legitimate):</label>
            <select id="insert-type">
                <option value="phishing">phishing</option>
                <option value="legitimate">legitimate</option>
            </select>
            
            <label>Customer ID (optional):</label>
            <input type="text" id="insert-customerId" placeholder="12345"/>
            
            <button onclick="insertEmail()">Insert</button>
            <div id="insert-result" class="result"></div>
        </section>

        <section>
            <h2>Analyze Email</h2>
            <label>Subject:</label>
            <input type="text" id="analyze-subject" placeholder="Subject"/>
            
            <label>Body (Base64):</label>
            <textarea id="analyze-body" rows="3"></textarea>
            
            <label>Sender:</label>
            <input type="text" id="analyze-sender" placeholder="sender@example.com"/>
            
            <label>Reply To:</label>
            <input type="text" id="analyze-reply_to" placeholder="replyto@example.com"/>
            
            <label>Customer ID (optional):</label>
            <input type="text" id="analyze-customerId" placeholder="12345"/>
            
            <button onclick="analyzeEmail()">Analyze</button>
            <div id="analyze-result" class="result"></div>
        </section>

        <section>
            <h2>Report False Positive</h2>
            <label>Subject:</label>
            <input type="text" id="report-subject" placeholder="Subject"/>
            
            <label>Body (Base64):</label>
            <textarea id="report-body" rows="3"></textarea>
            
            <label>Sender:</label>
            <input type="text" id="report-sender" placeholder="sender@example.com"/>
            
            <label>Reply To:</label>
            <input type="text" id="report-reply_to" placeholder="replyto@example.com"/>
            
            <label>Customer ID (optional):</label>
            <input type="text" id="report-customerId" placeholder="12345"/>
            
            <button onclick="reportFalsePositive()">Report False Positive</button>
            <div id="report-result" class="result"></div>
        </section>

        <section>
            <h2>Upload & Parse EML + Action</h2>
            <label>Action:</label>
            <select id="eml-action">
                <option value="analyze">Analyze</option>
                <option value="insert">Insert</option>
                <option value="report_false_positive">Report False Positive</option>
            </select>

            <div id="insert-options" style="display:none;">
                <label>Insert as:</label>
                <select id="insert-label">
                    <option value="phishing">phishing</option>
                    <option value="legitimate">legitimate</option>
                </select>
            </div>

            <label>Customer ID (optional):</label>
            <input type="text" id="eml-customerId" placeholder="12345"/>

            <label>Choose EML File:</label>
            <input type="file" id="eml-file" accept=".eml" />

            <button onclick="handleEml()">Upload & Process EML</button>
            <div id="eml-result" class="result"></div>
        </section>
    </div>

    <script>
        const API_BASE_URL = "{{ api_base_url }}";

        const emlActionSelect = document.getElementById('eml-action');
        const insertOptionsDiv = document.getElementById('insert-options');
        emlActionSelect.addEventListener('change', () => {
            if (emlActionSelect.value === 'insert') {
                insertOptionsDiv.style.display = 'block';
            } else {
                insertOptionsDiv.style.display = 'none';
            }
        });

        async function insertEmail() {
            const subject = document.getElementById('insert-subject').value;
            const body = document.getElementById('insert-body').value;
            const sender = document.getElementById('insert-sender').value;
            const reply_to = document.getElementById('insert-reply_to').value;
            const type = document.getElementById('insert-type').value;
            const customerId = document.getElementById('insert-customerId').value;

            const payload = {
                subject, body, sender,
                reply_to: reply_to || null,
                type,
                customerId: customerId || null
            };

            const resultDiv = document.getElementById('insert-result');
            resultDiv.innerText = "Inserting...";
            try {
                const resp = await fetch(`${API_BASE_URL}/insert`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const data = await resp.json();
                resultDiv.innerText = resp.ok ? data.message : ("Error: " + data.detail);
            } catch (e) {
                resultDiv.innerText = "Error: " + e;
            }
        }

        async function analyzeEmail() {
            const subject = document.getElementById('analyze-subject').value;
            const body = document.getElementById('analyze-body').value;
            const sender = document.getElementById('analyze-sender').value;
            const reply_to = document.getElementById('analyze-reply_to').value;
            const customerId = document.getElementById('analyze-customerId').value;

            const payload = {
                subject, body, sender,
                reply_to: reply_to || null,
                customerId: customerId || null
            };

            const resultDiv = document.getElementById('analyze-result');
            resultDiv.innerText = "Analyzing...";
            try {
                const resp = await fetch(`${API_BASE_URL}/analyze`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const data = await resp.json();
                resultDiv.innerText = resp.ok ? JSON.stringify(data, null, 2) : ("Error: " + data.detail);
            } catch (e) {
                resultDiv.innerText = "Error: " + e;
            }
        }

        async function reportFalsePositive() {
            const subject = document.getElementById('report-subject').value;
            const body = document.getElementById('report-body').value;
            const sender = document.getElementById('report-sender').value;
            const reply_to = document.getElementById('report-reply_to').value;
            const customerId = document.getElementById('report-customerId').value;

            const payload = {
                subject, body, sender,
                reply_to: reply_to || null,
                customerId: customerId || null
            };

            const resultDiv = document.getElementById('report-result');
            resultDiv.innerText = "Reporting false positive...";
            try {
                const resp = await fetch(`${API_BASE_URL}/report_false_positive`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const data = await resp.json();
                resultDiv.innerText = resp.ok ? data.message : ("Error: " + data.detail);
            } catch (e) {
                resultDiv.innerText = "Error: " + e;
            }
        }

        async function handleEml() {
            const fileInput = document.getElementById('eml-file');
            const action = document.getElementById('eml-action').value;
            const custId = document.getElementById('eml-customerId').value;
            const resultDiv = document.getElementById('eml-result');
            const isInsert = (action === 'insert');
            const insertLabel = (isInsert) ? document.getElementById('insert-label').value : null;

            if (!fileInput.files || fileInput.files.length === 0) {
                resultDiv.innerText = "Please select an EML file first.";
                return;
            }

            resultDiv.innerText = "Parsing EML...";
            try {
                const file = fileInput.files[0];
                const formData = new FormData();
                formData.append('file', file);

                const parseResp = await fetch(`${API_BASE_URL}/parse_eml`, {
                    method: 'POST',
                    body: formData
                });
                const parseData = await parseResp.json();
                if (!parseResp.ok) {
                    resultDiv.innerText = "Error parsing EML: " + parseData.detail;
                    return;
                }

                const { subject, body, sender } = parseData.email;
                resultDiv.innerText = "EML parsed. Now performing action: " + action + "...";

                let endpoint = "";
                let payload = { subject, body, sender, customerId: custId || null };

                if (action === 'analyze') {
                    endpoint = '/analyze';
                } else if (action === 'insert') {
                    endpoint = '/insert';
                    payload.type = insertLabel; // "phishing" or "legitimate"
                } else if (action === 'report_false_positive') {
                    endpoint = '/report_false_positive';
                }

                const finalResp = await fetch(`${API_BASE_URL}${endpoint}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });
                const finalData = await finalResp.json();
                if (!finalResp.ok) {
                    resultDiv.innerText = "Action error: " + finalData.detail;
                    return;
                }
                resultDiv.innerText = JSON.stringify(finalData, null, 2);
            } catch (e) {
                resultDiv.innerText = "Error: " + e;
            }
        }
    </script>
</body>
</html>


./static/style.css
/* Basic resets and body styling */
body {
    font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    background: #f9fafc;
    color: #333;
}

/* Wrapper to center content and control max-width */
.wrapper {
    max-width: 900px;
    margin: 40px auto;
    padding: 0 20px;
}

/* Main heading + subtle description text */
h1 {
    text-align: center;
    margin-bottom: 10px;
}

.api-info {
    text-align: center;
    color: #666;
    margin-bottom: 40px;
}

/* Sections for each functionality */
section {
    margin-bottom: 40px;
    padding: 20px;
    border: 1px solid #ececec;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

section h2 {
    margin-top: 0;
    margin-bottom: 15px;
    color: #444;
    font-size: 1.25em;
}

/* Labels and form elements */
label {
    display: block;
    margin-top: 15px;
    font-weight: 600;
}

input,
select,
button,
textarea {
    width: 100%;
    max-width: 100%;
    margin: 5px 0;
    padding: 10px;
    box-sizing: border-box;
    font-size: 0.95em;
    border: 1px solid #ccc;
    border-radius: 4px;
}

input:focus,
textarea:focus,
select:focus {
    outline: none;
    border-color: #7fa9ff;
    box-shadow: 0 0 3px #cce1ff;
}

/* Buttons */
button {
    cursor: pointer;
    background: #007bff;
    color: #fff;
    border: none;
    font-weight: 600;
    transition: background 0.3s ease;
    border-radius: 4px;
}

button:hover {
    background: #0056b3;
}

/* Result box */
.result {
    margin-top: 15px;
    padding: 10px;
    background: #eef;
    border-left: 5px solid #007bff;
    border-radius: 3px;
    word-wrap: break-word;
    white-space: pre-wrap; /* shows text with line breaks */
}


./web_ui.py
import logging
import os

from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

# If your main API is at a different URL/port, set it here:
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:5000")

# Create the FastAPI app for the UI
app = FastAPI(title="Phishing Detection Web UI", version="1.0.0")

# Set up logging
LOG_LEVEL = "INFO"
LOG_FORMAT = "[%(asctime)s] %(levelname)s %(name)s - %(message)s"
logging.basicConfig(level=LOG_LEVEL, format=LOG_FORMAT)
logger = logging.getLogger("web_ui")
logger.setLevel(logging.INFO)

# Mount the static directory for CSS, JS, images, etc.
app.mount("/static", StaticFiles(directory="static"), name="static")

# Set up templates directory
templates = Jinja2Templates(directory="templates")

@app.get("/", response_class=HTMLResponse)
def index(request: Request):
    """
    Render the main UI using a Jinja2 template.
    """
    return templates.TemplateResponse(
        "index.html",
        {
            "request": request,
            "api_base_url": API_BASE_URL
        }
    )


##
# uvicorn web_ui:app --host 0.0.0.0 --port 8000 --reload
##

